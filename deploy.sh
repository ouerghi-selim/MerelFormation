#!/bin/bash

# Script de d√©ploiement pour MerelFormation - Version OPTIMIS√âE
# Configuration dynamique pour dev/prod

# Variables d'environnement (modifiables)
DEPLOY_ENV=${DEPLOY_ENV:-"dev"}
API_HOST=${API_HOST:-"localhost"}
API_PORT=${API_PORT:-"80"}

echo "üöÄ D√©marrage du d√©ploiement MerelFormation..."
echo "üìç Environnement: $DEPLOY_ENV"
echo "üåê Host: $API_HOST:$API_PORT"

# ‚úÖ NOUVEAU : V√©rification des corrections 502
echo "üîç V√©rification des corrections anti-502..."
if [ ! -f "docker/php/www.conf" ]; then
    echo "‚ùå ERREUR: docker/php/www.conf manquant !"
    echo "üí° Ex√©cutez d'abord le script de correction des erreurs 502"
    exit 1
fi

if ! grep -q "listen = 0.0.0.0:9000" docker/php/www.conf; then
    echo "‚ùå ERREUR: Configuration PHP-FPM incorrecte dans docker/php/www.conf"
    echo "üí° Le fichier doit contenir 'listen = 0.0.0.0:9000'"
    exit 1
fi

echo "‚úÖ Corrections anti-502 pr√©sentes"

# ‚úÖ AJOUT: Arr√™ter tous les conteneurs d'abord pour √©viter les conflits
echo "üõë Arr√™t des conteneurs existants..."
docker-compose -f docker-compose.prod.yml down

# ‚úÖ AM√âLIORATION: Gestion S√âCURIS√âE des r√©pertoires de donn√©es
echo "üìÅ Pr√©paration des r√©pertoires de donn√©es..."

# Cr√©er les r√©pertoires de base
mkdir -p data/certbot/conf
mkdir -p data/certbot/www

# ‚úÖ CORRECTION CRITIQUE: Pr√©servation des donn√©es MySQL existantes
if [ -d "data/mysql" ]; then
    echo "üìä Donn√©es MySQL existantes d√©tect√©es - PR√âSERVATION des donn√©es"

    # V√©rifier et corriger seulement les permissions
    echo "üîß Correction des permissions MySQL (sans suppression des donn√©es)..."
    sudo chown -R 999:999 data/mysql
    sudo chmod -R 755 data/mysql

    # V√©rifier s'il y a des fichiers dans le r√©pertoire
    if [ "$(ls -A data/mysql)" ]; then
        echo "‚úÖ Donn√©es MySQL pr√©serv√©es ($(du -sh data/mysql | cut -f1))"
    else
        echo "‚ÑπÔ∏è R√©pertoire MySQL vide - premi√®re installation"
    fi
else
    echo "üÜï Premi√®re installation - cr√©ation du r√©pertoire MySQL..."
    mkdir -p data/mysql
    sudo chown -R 999:999 data/mysql
    sudo chmod -R 755 data/mysql
fi

# S'assurer que le r√©pertoire de build existe
mkdir -p app/public/build
mkdir -p app/public/uploads/sessions
mkdir -p app/public/uploads/formations

# Nettoyer les anciens fichiers de build
echo "üßπ Nettoyage des fichiers pr√©c√©dents..."
rm -rf app/public/build/*

# Copier le fichier .env.prod vers .env
if [ -f "app/.env.prod" ]; then
    cp app/.env.prod app/.env
    echo "‚úÖ Fichier .env.prod copi√© vers .env"
else
    echo "‚ö†Ô∏è Attention: app/.env.prod n'existe pas"
fi

# Construction du frontend
echo "üèóÔ∏è Construction du frontend..."
docker-compose -f docker-compose.prod.yml run --rm node

# Copier les fichiers TinyMCE dans le build
echo "üìÑ Copie des fichiers TinyMCE..."
if [ -d "frontend/dist/tinymce" ]; then
    cp -r frontend/dist/tinymce app/public/
    echo "‚úÖ TinyMCE copi√© vers app/public/tinymce"
else
    echo "‚ö†Ô∏è TinyMCE non trouv√© dans le build - v√©rifier la configuration Vite"
fi

# V√©rifier que les fichiers ont √©t√© g√©n√©r√©s
echo "‚úÖ V√©rification des fichiers frontend..."
if [ ! -f "app/public/build/index.html" ]; then
  echo "‚ùå ERREUR: Le build frontend n'a pas g√©n√©r√© index.html"
  ls -la app/public/build
  exit 1
fi

# ‚úÖ OPTIMIS√â : √âviter rebuild si pas n√©cessaire (variable d'environnement)
if [ "$FORCE_REBUILD" = "true" ]; then
    echo "üèóÔ∏è Reconstruction forc√©e de l'image PHP..."
    docker-compose -f docker-compose.prod.yml build --no-cache php
else
    echo "‚ö° Skip rebuild PHP (utilise FORCE_REBUILD=true pour forcer)"
fi

# V√©rifier que l'index.html fait r√©f√©rence aux bons fichiers
echo "üîç V√©rification des r√©f√©rences dans index.html..."
grep -oE "assets/[^\"']*\.(js|css)" app/public/build/index.html

# Lister les fichiers dans le r√©pertoire assets
echo "üìÅ Fichiers assets g√©n√©r√©s:"
ls -la app/public/build/assets/ 2>/dev/null || echo "Pas de r√©pertoire assets"

# ‚úÖ CORRECTION: Lancer TOUS les services, y compris MailHog
echo "üê≥ Lancement des conteneurs..."
docker-compose -f docker-compose.prod.yml up -d

# ‚úÖ Attente optimis√©e pour le d√©marrage
echo "‚è≥ Attente du d√©marrage des services (10 secondes)..."
sleep 10

# ‚úÖ V√©rification simplifi√©e de PHP-FPM
echo "üîå V√©rification de PHP-FPM..."
PHP_ATTEMPTS=0
MAX_PHP_ATTEMPTS=6

while [ $PHP_ATTEMPTS -lt $MAX_PHP_ATTEMPTS ]; do
    PHP_ATTEMPTS=$((PHP_ATTEMPTS + 1))
    
    if docker-compose -f docker-compose.prod.yml exec nginx nc -z php 9000 2>/dev/null; then
        echo "‚úÖ PHP-FPM op√©rationnel"
        break
    fi
    
    if [ $PHP_ATTEMPTS -eq $MAX_PHP_ATTEMPTS ]; then
        echo "‚ùå ERREUR: PHP-FPM non accessible apr√®s $((MAX_PHP_ATTEMPTS * 3)) secondes"
        docker-compose -f docker-compose.prod.yml logs --tail=5 php
        exit 1
    fi
    
    echo "‚è≥ Tentative $PHP_ATTEMPTS/$MAX_PHP_ATTEMPTS..."
    sleep 3
done

# ‚úÖ V√©rification simplifi√©e de MySQL
echo "üîÑ V√©rification de MySQL..."
MYSQL_MAX_ATTEMPTS=8
MYSQL_ATTEMPT=0

while [ $MYSQL_ATTEMPT -lt $MYSQL_MAX_ATTEMPTS ]; do
    if docker-compose -f docker-compose.prod.yml exec mysql mysqladmin ping -h localhost --silent 2>/dev/null; then
        echo "‚úÖ MySQL op√©rationnel"
        break
    fi
    
    MYSQL_ATTEMPT=$((MYSQL_ATTEMPT + 1))
    if [ $MYSQL_ATTEMPT -eq $MYSQL_MAX_ATTEMPTS ]; then
        echo "‚ùå ERREUR: MySQL non accessible apr√®s $((MYSQL_MAX_ATTEMPTS * 5)) secondes"
        docker-compose -f docker-compose.prod.yml logs --tail=5 mysql
        echo "üí° Solutions: sudo chown -R 999:999 data/mysql && ./deploy.sh"
        exit 1
    fi
    
    echo "‚è≥ MySQL en cours de d√©marrage... ($MYSQL_ATTEMPT/$MYSQL_MAX_ATTEMPTS)"
    sleep 5
done

# ‚úÖ AJOUT: V√©rifier que MailHog est aussi d√©marr√©
echo "üìß V√©rification de MailHog..."
if docker-compose -f docker-compose.prod.yml ps mailhog | grep -q "Up"; then
    echo "‚úÖ MailHog est op√©rationnel"
else
    echo "‚ö†Ô∏è MailHog a un probl√®me, mais on continue..."
fi

echo "üì¶ Installation des d√©pendances..."

# Installer les d√©pendances Symfony (SANS auto-scripts pour √©viter blocages)
echo "üì¶ Installation des d√©pendances Composer..."
docker-compose -f docker-compose.prod.yml exec php composer install --no-dev --optimize-autoloader --no-scripts

# Correction des permissions AVANT le cache
echo "üîß Correction des permissions..."
docker-compose -f docker-compose.prod.yml exec php bash -c "
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p /var/www/var/cache/prod/vich_uploader
    mkdir -p /var/www/var/cache/prod/jms_metadata
    mkdir -p /var/www/var/log
    mkdir -p /var/www/public/uploads/sessions
    mkdir -p /var/www/public/uploads/formations

    # Permissions compl√®tes
    chown -R www-data:www-data /var/www/var
    chown -R www-data:www-data /var/www/public/uploads
    chmod -R 777 /var/www/var/cache
    chmod -R 777 /var/www/var/log
    chmod -R 755 /var/www/public/uploads
"

# Vider le cache Symfony (M√âTHODE HYBRIDE pour √©viter blocages)
echo "üóëÔ∏è Vidage du cache Symfony..."
echo "‚ö†Ô∏è Si √ßa bloque, tapez Ctrl+C et relancez manuellement"
timeout 120 docker-compose -f docker-compose.prod.yml exec php php bin/console cache:clear --env=prod --no-debug || {
    echo "‚ö†Ô∏è cache:clear a √©chou√© ou pris trop de temps"
    echo "üõ†Ô∏è Utilisation de la m√©thode de fallback..."
    docker-compose -f docker-compose.prod.yml exec php rm -rf /var/www/var/cache/prod/* || true
    docker-compose -f docker-compose.prod.yml exec php php bin/console cache:warmup --env=prod --no-optional-warmers || true
    echo "‚ö†Ô∏è IMPORTANT: Vous devrez peut-√™tre lancer manuellement:"
    echo "   docker-compose -f docker-compose.prod.yml exec php php bin/console cache:clear --env=prod"
}

# Re-correction des permissions apr√®s cache
echo "üîß Re-correction des permissions apr√®s cache..."
docker-compose -f docker-compose.prod.yml exec php bash -c "
    chown -R www-data:www-data /var/www/var/cache
    chmod -R 777 /var/www/var/cache
"

# Ex√©cuter les migrations
echo "üóÑÔ∏è Ex√©cution des migrations..."
docker-compose -f docker-compose.prod.yml exec php php bin/console doctrine:migrations:migrate --no-interaction

# V√©rifier les permissions des fichiers statiques
echo "üîê V√©rification des permissions des fichiers statiques..."
docker-compose -f docker-compose.prod.yml exec nginx chmod -R 755 /var/www/public/build

# ‚úÖ CORRECTION : Pas de red√©marrage PHP inutile qui cause des probl√®mes de timing
echo "üîÑ Stabilisation des services..."
sleep 10

# Afficher l'√©tat des conteneurs
echo "üìä √âtat des conteneurs:"
docker-compose -f docker-compose.prod.yml ps

# ‚úÖ Tests API optionnels (seulement si DEPLOY_ENV=prod)
if [ "$DEPLOY_ENV" = "prod" ]; then
    echo "üß™ Tests API en mode production..."
    
    # Test simple de l'API
    echo "üîç Test API formations..."
    API_URL="http://$API_HOST:$API_PORT/api/formations"
    HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL" --max-time 10 || echo "000")
    
    if [ "$HTTP_CODE" = "200" ]; then
        echo "‚úÖ API accessible (HTTP $HTTP_CODE)"
    elif [ "$HTTP_CODE" = "502" ]; then
        echo "‚ùå ERREUR 502 - Probl√®me de configuration"
        exit 1
    else
        echo "‚ö†Ô∏è API retourne HTTP $HTTP_CODE"
    fi
else
    echo "‚ÑπÔ∏è Tests API ignor√©s en mode d√©veloppement"
fi

echo ""
echo "üéâ D√©ploiement termin√© avec succ√®s!"
echo "=================================="
echo "üåê Application: http://$API_HOST:$API_PORT"
echo "üîß Admin: http://$API_HOST:$API_PORT/admin"
echo "üìß MailHog: http://$API_HOST:8025"
echo ""
echo "üìä √âtat des services:"
docker-compose -f docker-compose.prod.yml ps --format "table {{.Service}}\t{{.Status}}\t{{.Ports}}"
echo ""
echo "üìã Commandes utiles:"
echo "   ‚Ä¢ Logs: docker-compose -f docker-compose.prod.yml logs [service]"
echo "   ‚Ä¢ Restart: docker-compose -f docker-compose.prod.yml restart [service]"
echo "   ‚Ä¢ Stop: docker-compose -f docker-compose.prod.yml down"
echo ""
echo "üíæ Donn√©es MySQL: $(du -sh data/mysql 2>/dev/null | cut -f1 || echo 'Premi√®re installation')"
echo ""
if [ "$DEPLOY_ENV" = "dev" ]; then
    echo "‚ÑπÔ∏è Mode d√©veloppement - Variables d'environnement disponibles:"
    echo "   DEPLOY_ENV=prod API_HOST=votre-domaine.com ./deploy.sh"
    echo "   FORCE_REBUILD=true ./deploy.sh  # Force rebuild PHP si probl√®mes"
fi

echo ""
echo "üÜò En cas de probl√®me cache bloqu√©:"
echo "   docker-compose -f docker-compose.prod.yml exec php rm -rf /var/www/var/cache/prod/*"
echo "   docker-compose -f docker-compose.prod.yml restart php"